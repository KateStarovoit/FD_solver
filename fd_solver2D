#imports
import numpy as np
import scipy.sparse
from scipy.sparse.linalg import spsolve
import matplotlib.pyplot as plt

def print_solution(X,Y,S):
    index = 0
    C =  np.empty((len(X), len(Y)))
    for i in range(0, len(C)):
        for j in range(0, len(C)):
            C[i][j] = S[index]
            index += 1
    fig, ax = plt.subplots()
    plt.scatter(X, Y, c = C, s = 15)
    plt.colorbar()
    plt.show()

def get_index(i,j,n):
    return int(i+j*n)

def FD_solve(nx,ny,bc,h):
    X, Y = np.meshgrid(np.arange(0, 1, h), np.arange(0, 1, h))
    
    L = np.empty((len(X)*len(Y), len(X)*len(Y)))
    U = np.zeros(len(X)*len(Y))
       
    #constructing L and U
    for i in range(0, len(X)):
        for j in range(0, len(Y)):   
            mid_index = get_index(i,j,1/h)
            right_index = get_index(i+1,j,1/h)
            left_index = get_index(i-1,j,1/h)
            bottom_index = get_index(i,j-1,1/h)
            top_index = get_index(i,j+1,1/h)
            L[mid_index] = np.zeros(len(L))
            L[mid_index] = np.zeros(len(L))
            L[mid_index][mid_index] = -4
            
            if (i+1) < len(X):
                    L[mid_index][right_index] = 1
            if i > 0:
                    L[mid_index][left_index] = 1
            if j > 0:
                    L[mid_index][bottom_index] = 1
            if (j+1) < len(Y):
                    L[mid_index][top_index] = 1

    #applying bc
    for index in range(0, len(nx)):
        i = nx[index]
        j = ny[index]
        mid_index = int(get_index(i,j,1/h))
        right_index = get_index(i+1,j,1/h)
        left_index = get_index(i-1,j,1/h)
        bottom_index = get_index(i,j-1,1/h)
        top_index = get_index(i,j+1,1/h)
        
        if bc[index][0] == 't' and (j+1) < len(Y):
            L[mid_index][top_index] -= 1
        elif bc[index][0] == 'b' and j > 0:
            L[mid_index][bottom_index] -= 1
        elif bc[index][0] == 'r' and i > 0:
            L[mid_index][right_index] -= 1
        elif bc[index][0] == 'l' and (i+1) < len(X):
            L[mid_index][left_index] -= 1
        
        
        if bc[index][1] != '-':
            U[mid_index] += bc[index][1]
        else:
            L[mid_index][mid_index] += 1
            U[mid_index] += bc[index][2]  
          
    sol = spsolve(scipy.sparse.csc_matrix(L),-U)
            
    #Print Solution
    print_solution(X,Y,sol)
    return sol
