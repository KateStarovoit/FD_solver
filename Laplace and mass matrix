import igl
import numpy as np
from meshplot import plot, subplot, interact
import torch
import os
from scipy.sparse.linalg import spsolve
from scipy.sparse import csc_matrix
root_folder = os.getcwd()

#pull one of the adges
def x_e(e, x0, v):
    return x0 + e*v

#triangle area
def area(V):
    s1 = torch.linalg.norm(V[0]-V[1])
    s2 = torch.linalg.norm(V[1]-V[2])
    s3 = torch.linalg.norm(V[2]-V[0])
    p = (s1+s2+s3)/2
    a = torch.sqrt(p*(p-s1)*(p-s2)*(p-s3))
    return a

#mass matrix
def m_grad(v,f):
    M_grad = []
    for fi in f:
         M_grad.append(torch.autograd.functional.jacobian(area,torch.tensor([v[fi[0]],v[fi[1]],v[fi[2]]])))
    return(M_grad)

#angles and cot for one triangle
def find_cot(a, b, c, Ai):
    sina = (Ai)/(b*c)
    sinb = (Ai)/(a*c);
    sinc = (Ai)/(a*b);
    cosa = (- a * a + b * b + c * c) / (2 * b * c)
    cosb = (- b * b + a * a + c * c) / (2 * a * c)
    cosc = (- c * c + a * a + b * b) / (2 * a * b)

    cota = (- a * a + b * b + c * c) / Ai
    cotb = (- b * b + a * a + c * c) / Ai
    cotc = (- c * c + a * a + b * b) / Ai
    return cota, cotb, cotc

#cot matrix
def l_grad(l, A, f):
    cot =  np.zeros((len(l),3))
    for i in range(len(l)):
        cota, cotb, cotc = find_cot(l[i][0], l[i][1], l[i][2], A[i])
        cot[i] = [cota,cotb,cotc]           
    L_grad = np.zeros((len(l),(len(l))))
    for i in range(len(l)):
        for j in range(3):
           L_grad[f[i][(j+1)%3]][f[i][(j+2)%3]]+= cot[i][j]
           L_grad[f[i][(j+2)%3]][f[i][(j+1)%3]]+= cot[i][j]
           L_grad[f[i][(j+1)%3]][f[i][(j+1)%3]]-= cot[i][j]
           L_grad[f[i][(j+2)%3]][f[i][(j+2)%3]]-= cot[i][j]
    return csc_matrix(L_grad)
