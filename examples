#Bounding box example 1
h = 0.01
P = [[0,0],[0.5,0],[0.6,0.1],[0.7,0.2],[0.8,0.3],[1,0.5],[0.7,1],[0.6,0.5],[0.5,1.5],[0.4,1.4],[0.3,1.6], [0.2,1.4],[0.1,0.7],[0,0]]
X_1, Y_1 = print_outline(P)
out = bounding_box(P,0.01)
X_2, Y_2 = print_outline(out)
fig, ax = plt.subplots()
ax.set_aspect('equal')
X_2, Y_2 = print_outline(out)
plt.plot(X_2,Y_2, color = 'red')
plt.plot(X_1,Y_1, color = 'purple')

#Bounding box example 2
h = 0.01
P = [[0,1],[0.5,0],[1,1],[1.5,0],[2,1],[1.5,2],[2,3], [1.5,4], [1,3], [0.5,4], [0,3],[0.5,2], [0,1]]
X_1, Y_1 = print_outline(P)
out = bounding_box(P,0.01)
X_2, Y_2 = print_outline(out)
fig, ax = plt.subplots()
ax.set_aspect('equal')
X_2, Y_2 = print_outline(out)
plt.plot(X_2,Y_2, color = 'red')
plt.plot(X_1,Y_1, color = 'purple')

#Bounding box example 3
h = 0.01
P = [[0,2], [1,1],[2,0],[3,1],[4,2],[2,1.5],[2,2.5],[4,3],[4,4],[3,4.5],[2,4],[1,4.5],[0,6],[-1,4.5],[-2,4],[-3,4.5],
    [-4,4],[-4,3],[-2,2.5],[-2,1.5],[-4,2],[-3,1],[-2,0],[-1,1],[0,2]]
X_1, Y_1 = print_outline(P)
out = bounding_box(P,0.01)
X_2, Y_2 = print_outline(out)
fig, ax = plt.subplots()
ax.set_aspect('equal')
X_2, Y_2 = print_outline(out)
plt.plot(X_2,Y_2, color = 'red')
plt.plot(X_1,Y_1, color = 'purple')

#Winding number example 1
h = 0.01
P = [[0,0],[1,0.5],[0,1],[-1,0.5], [0,0]]
X, Y = np.meshgrid(np.arange(-1, 1, h), np.arange(0, 1, h))
X_1, Y_1 = print_outline(P)
WN = []

for i in range(len(X)):
    for j in range(len(X[0])):
        p = [[X[i][j], Y[i][j]]]
        WN.append(winding_num(p,np.array(P)))
        
fig, ax = plt.subplots()
ax.set_aspect('equal')
plt.plot(X_1,Y_1, color = 'purple')
plt.scatter(X,Y, c = WN, cmap = 'Purples')
plt.colorbar()
plt.show()

#Winding number example 2
h = 0.01
P = [[0,0],[0.5,0],[0.6,0.1],[0.7,0.2],[0.8,0.3],[1,0.5],[0.7,1],[0.6,0.5],[0.5,1.5],[0.4,1.4],[0.3,1.6], [0.2,1.4],[0.1,0.7],[0,0]]
X, Y = np.meshgrid(np.arange(0, 1, h), np.arange(0, 2, h))
X_1, Y_1 = print_outline(P)
WN = []

for i in range(len(X)):
    for j in range(len(X[0])):
        p = [[X[i][j], Y[i][j]]]
        WN.append(winding_num(p,np.array(P)))
        
fig, ax = plt.subplots()
ax.set_aspect('equal')
plt.plot(X_1,Y_1, color = 'purple')
plt.scatter(X,Y, c = WN, cmap = 'Purples')
plt.colorbar()
plt.show()

#Winding number example 3
h = 0.01
P = [[0,2], [1,1],[2,0],[3,1],[4,2],[2,1.5],[2,2.5],[4,3],[4,4],[3,4.5],[2,4],[1,4.5],[0,6],[-1,4.5],[-2,4],[-3,4.5],
    [-4,4],[-4,3],[-2,2.5],[-2,1.5],[-4,2],[-3,1],[-2,0],[-1,1],[0,2]]
X, Y = np.meshgrid(np.arange(-4, 4, h), np.arange(0, 6, h))
X_1, Y_1 = print_outline(P)
WN = []

for i in range(len(X)):
    for j in range(len(X[0])):
        p = [[X[i][j], Y[i][j]]]
        WN.append(winding_num(p,np.array(P)))
        
fig, ax = plt.subplots()
ax.set_aspect('equal')
plt.plot(X_1,Y_1, color = 'purple')
plt.scatter(X,Y, c = WN, cmap = 'Purples')
plt.colorbar()
plt.show()

#Dirichlet bc example
h = 0.1
V = [[0, 0.81], [0.15, 0.82], [0.23, 0.78], [0.31, 0.81]]
E = [[0,1], [2, 3]]
bc = [['t',1,0], ['t',1,0],['t',1,0],['t',1,0]]
S = FD_solve(V,E,bc,h)

#Neumann bc example
h = 0.1
V = [[0, 0.81], [0.15, 0.82], [0.23, 0.78], [0.31, 0.81]]
E = [[0,1], [2, 3]]
bc = [['t','-',1], ['t','-',1],['t','-',1],['t','-',1]]
S = FD_solve(V,E,bc,h)
